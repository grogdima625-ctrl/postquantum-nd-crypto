import numpy as np
from dimshade_core import generate_SO5_key, derive_scalar_secret

# –ò—Å—Ç–∏–Ω–Ω—ã–µ –∫–ª—é—á–∏
A = generate_SO5_key()
B = generate_SO5_key()

# –ò—Å—Ç–∏–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
v_true = np.random.randn(5)
v_true /= np.linalg.norm(v_true)

# –ò—Å—Ç–∏–Ω–Ω—ã–π —Å–∫–∞–ª—è—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç
s_true = derive_scalar_secret(A, B, v_true)
print(f"üéØ –ò—Å—Ç–∏–Ω–Ω—ã–π —Å–∫–∞–ª—è—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç: {s_true:.10f}")

# –≠–º—É–ª—è—Ü–∏—è –∞—Ç–∞–∫–∏: –ø–µ—Ä–µ–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤
attempts = 100_000
closest = None
min_diff = float('inf')

for _ in range(attempts):
    v_guess = np.random.randn(5)
    v_guess /= np.linalg.norm(v_guess)
    s_guess = derive_scalar_secret(A, B, v_guess)
    diff = abs(s_guess - s_true)
    if diff < min_diff:
        min_diff = diff
        closest = s_guess

print(f"\nüß™ –õ—É—á—à–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {closest:.10f}")
print(f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: {min_diff:.10f}")
print(f"üîê –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏: {'–ù–ï–í–û–ó–ú–û–ñ–ù–ê' if min_diff > 1e-6 else '–í–û–ó–ú–û–ñ–ù–ê'}")
